        -:    0:Source:./vector_cordic.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:
        -:    2:#include <stdio.h>
        -:    3:#include <math.h>
        -:    4:
        -:    5:int angle_arr[14] = {6433, 3797, 2005, 1018, 510, 254, 127, 62, 31, 15, 7, 3, 1,0 };
        -:    6:
        2:    7:void cordic_vector(double x, double y){
        -:    8:	
        -:    9:	// int x_prev = (int) (x *  pow(2,13)); 
        -:   10:	// int y_prev = (int) (y * pow(2,13)); 
        2:   11:	int x_prev = (int) (x * (1 << 13)); 
        2:   12:	int y_prev = (int) (y * (1 << 13)); 
        2:   13:	int z=0; 
        2:   14:	int x_next =0; 
        2:   15:	int y_next =0; 
        2:   16:	int z_next =0; 
        2:   17:	printf("######Initial x_prev is %d\t y is %d\t####\n", x_prev,y_prev );
       30:   18:	for(int i=0; i<14; i++)
        -:   19:	{
       28:   20:		printf("iteration: %d\n", i);
       28:   21:		printf("x_next= %d \t y_next= %d \n",x_next,y_next);
       28:   22:		if(y_prev > 0)
        -:   23:		{
       12:   24:			x_next = x_prev +  (y_prev >> i);
       12:   25:		   	y_next = y_prev - (x_prev >> i);
       12:   26:		   	z_next = z + angle_arr[i];
       12:   27:		   	x_prev = x_next; 
       12:   28:		   	y_prev = y_next;
       12:   29:		   	z = z_next; 
       12:   30:		}
        -:   31:
        -:   32:		else
        -:   33:		{
       16:   34:			x_next = x_prev - (y_prev >> i);
       16:   35:		   	y_next = y_prev + (x_prev >> i);
       16:   36:		   	z_next = z - angle_arr[i];
       16:   37:			x_prev = x_next; 
       16:   38:	   		y_prev = y_next;
       16:   39:	   		z = z_next;
        -:   40:		}
        -:   41:
        -:   42:
        -:   43:
       28:   44:	}	
        -:   45:
        -:   46:
        2:   47:	printf("This is the result %d\t %d\t %d\n", x_next, y_next,z);
        -:   48:
        2:   49:}
